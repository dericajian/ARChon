diff --git a/chrome/browser/chrome_content_browser_client.cc b/chrome/browser/chrome_content_browser_client.cc
index 4f39b25..005fa88 100644
--- a/chrome/browser/chrome_content_browser_client.cc
+++ b/chrome/browser/chrome_content_browser_client.cc
@@ -2576,6 +2576,7 @@ ChromeContentBrowserClient::GetDevToolsManagerDelegate() {
 bool ChromeContentBrowserClient::IsPluginAllowedToCallRequestOSFileHandle(
     content::BrowserContext* browser_context,
     const GURL& url) {
+  return true;
 #if defined(ENABLE_PLUGINS) && defined(ENABLE_EXTENSIONS)
   return ChromeContentBrowserClientPluginsPart::
       IsPluginAllowedToCallRequestOSFileHandle(browser_context, url,
@@ -2588,6 +2589,7 @@ bool ChromeContentBrowserClient::IsPluginAllowedToCallRequestOSFileHandle(
 bool ChromeContentBrowserClient::IsPluginAllowedToUseDevChannelAPIs(
     content::BrowserContext* browser_context,
     const GURL& url) {
+  return true;
 #if defined(ENABLE_PLUGINS) && defined(ENABLE_EXTENSIONS)
   return ChromeContentBrowserClientPluginsPart::
       IsPluginAllowedToUseDevChannelAPIs(browser_context, url,
diff --git a/chrome/browser/nacl_host/nacl_browser_delegate_impl.cc b/chrome/browser/nacl_host/nacl_browser_delegate_impl.cc
index e1c5498..6b069a2 100644
--- a/chrome/browser/nacl_host/nacl_browser_delegate_impl.cc
+++ b/chrome/browser/nacl_host/nacl_browser_delegate_impl.cc
@@ -197,6 +197,9 @@ bool NaClBrowserDelegateImpl::MapUrlToLocalFilePath(
     const base::FilePath& profile_directory,
     base::FilePath* file_path) {
 #if defined(ENABLE_EXTENSIONS)
+  LOG(INFO) << file_url.path();
+  *file_path = base::FilePath(file_url.path());
+  return true;
   scoped_refptr<extensions::InfoMap> extension_info_map =
       GetExtensionInfoMap(profile_directory);
   return extension_info_map->MapUrlToLocalFilePath(
@@ -214,6 +217,7 @@ NaClBrowserDelegateImpl::GetOnKeepaliveCallback() {
 bool NaClBrowserDelegateImpl::IsNonSfiModeAllowed(
     const base::FilePath& profile_directory,
     const GURL& manifest_url) {
+  return true;
 #if defined(ENABLE_EXTENSIONS)
   const extensions::ExtensionSet* extension_set =
       &GetExtensionInfoMap(profile_directory)->extensions();
diff --git a/chrome/browser/renderer_host/pepper/pepper_isolated_file_system_message_filter.cc b/chrome/browser/renderer_host/pepper/pepper_isolated_file_system_message_filter.cc
index 884833c..2640b6e 100644
--- a/chrome/browser/renderer_host/pepper/pepper_isolated_file_system_message_filter.cc
+++ b/chrome/browser/renderer_host/pepper/pepper_isolated_file_system_message_filter.cc
@@ -100,18 +100,20 @@ Profile* PepperIsolatedFileSystemMessageFilter::GetProfile() {
 std::string PepperIsolatedFileSystemMessageFilter::CreateCrxFileSystem(
     Profile* profile) {
 #if defined(ENABLE_EXTENSIONS)
+  /*
   const extensions::Extension* extension =
       extensions::ExtensionRegistry::Get(profile)->enabled_extensions().GetByID(
           document_url_.host());
   if (!extension)
     return std::string();
-
+  */
   // First level directory for isolated filesystem to lookup.
   std::string kFirstLevelDirectory("crxfs");
   return storage::IsolatedContext::GetInstance()->RegisterFileSystemForPath(
       storage::kFileSystemTypeNativeLocal,
       std::string(),
-      extension->path(),
+      //extension->path(),
+      base::FilePath("/ssd/arc/com.example.testsimpleapp.android/"),
       &kFirstLevelDirectory);
 #else
   return std::string();
@@ -144,6 +146,7 @@ int32_t PepperIsolatedFileSystemMessageFilter::OpenCrxFileSystem(
     extension_set =
         &extensions::ExtensionRegistry::Get(profile)->enabled_extensions();
   }
+  /*
   if (!IsExtensionOrSharedModuleWhitelisted(
           document_url_, extension_set, allowed_crxfs_origins_) &&
       !IsHostAllowedByCommandLine(
@@ -151,7 +154,7 @@ int32_t PepperIsolatedFileSystemMessageFilter::OpenCrxFileSystem(
     LOG(ERROR) << "Host " << document_url_.host() << " cannot use CrxFs API.";
     return PP_ERROR_NOACCESS;
   }
-
+*/
   // TODO(raymes): When we remove FileSystem from the renderer, we should create
   // a pending PepperFileSystemBrowserHost here with the fsid and send the
   // pending host ID back to the plugin.
diff --git a/chrome/renderer/chrome_content_renderer_client.cc b/chrome/renderer/chrome_content_renderer_client.cc
index 48f26e1..00c89b1 100644
--- a/chrome/renderer/chrome_content_renderer_client.cc
+++ b/chrome/renderer/chrome_content_renderer_client.cc
@@ -943,6 +943,7 @@ bool ChromeContentRendererClient::IsNaClAllowed(
     bool is_nacl_unrestricted,
     const Extension* extension,
     WebPluginParams* params) {
+  return true;
   // Temporarily allow these whitelisted apps and WebUIs to use NaCl.
   std::string app_url_host = app_url.host();
   std::string manifest_url_path = manifest_url.path();
@@ -1536,6 +1537,7 @@ bool ChromeContentRendererClient::IsPluginAllowedToUseDevChannelAPIs() {
 
 bool ChromeContentRendererClient::IsPluginAllowedToUseCompositorAPI(
     const GURL& url) {
+  return true;
 #if defined(ENABLE_PLUGINS) && defined(ENABLE_EXTENSIONS)
   if (base::CommandLine::ForCurrentProcess()->HasSwitch(
           switches::kEnablePepperTesting))
@@ -1552,6 +1554,7 @@ bool ChromeContentRendererClient::IsPluginAllowedToUseCompositorAPI(
 
 bool ChromeContentRendererClient::IsPluginAllowedToUseVideoDecodeAPI(
     const GURL& url) {
+  return true;
 #if defined(ENABLE_PLUGINS) && defined(ENABLE_EXTENSIONS)
   if (base::CommandLine::ForCurrentProcess()->HasSwitch(
           switches::kEnablePepperTesting))
diff --git a/chrome/renderer/pepper/pepper_uma_host.cc b/chrome/renderer/pepper/pepper_uma_host.cc
index 9e32d61..c1cd42e 100644
--- a/chrome/renderer/pepper/pepper_uma_host.cc
+++ b/chrome/renderer/pepper/pepper_uma_host.cc
@@ -89,6 +89,7 @@ int32_t PepperUMAHost::OnResourceMessageReceived(
 }
 
 bool PepperUMAHost::IsPluginWhitelisted() {
+  return true;
 #if defined(ENABLE_EXTENSIONS)
   return ChromeContentRendererClient::IsExtensionOrSharedModuleWhitelisted(
       document_url_, allowed_origins_);
diff --git a/components/nacl/browser/nacl_file_host.cc b/components/nacl/browser/nacl_file_host.cc
index 17e5bc5..a107dcc 100644
--- a/components/nacl/browser/nacl_file_host.cc
+++ b/components/nacl/browser/nacl_file_host.cc
@@ -231,6 +231,7 @@ void OpenNaClExecutable(
     nacl_host_message_filter->BadMessageReceived();  // Kill the renderer.
     return;
   }
+  /*
   content::SiteInstance* site_instance = rvh->GetSiteInstance();
   if (!content::SiteInstance::IsSameWebSite(site_instance->GetBrowserContext(),
                                             site_instance->GetSiteURL(),
@@ -238,7 +239,7 @@ void OpenNaClExecutable(
     NotifyRendererOfError(nacl_host_message_filter.get(), reply_msg);
     return;
   }
-
+  */
   // The URL is part of the current app. Now query the extension system for the
   // file path and convert that to a file descriptor. This should be done on a
   // blocking pool thread.
diff --git a/components/nacl/renderer/file_downloader.cc b/components/nacl/renderer/file_downloader.cc
index d6dd270..ca26f0d 100644
--- a/components/nacl/renderer/file_downloader.cc
+++ b/components/nacl/renderer/file_downloader.cc
@@ -39,8 +39,8 @@ void FileDownloader::didReceiveResponse(
     blink::WebURLLoader* loader,
     const blink::WebURLResponse& response) {
   http_status_code_ = response.httpStatusCode();
-  if (http_status_code_ != 200)
-    status_ = FAILED;
+//  if (http_status_code_ != 200)
+//    status_ = FAILED;
 
   // Set -1 if the content length is unknown. Set before issuing callback.
   total_bytes_to_be_received_ = response.expectedContentLength();
diff --git a/components/nacl/renderer/manifest_downloader.cc b/components/nacl/renderer/manifest_downloader.cc
index 2ea1171..1f43a2a 100644
--- a/components/nacl/renderer/manifest_downloader.cc
+++ b/components/nacl/renderer/manifest_downloader.cc
@@ -35,8 +35,8 @@ void ManifestDownloader::Load(const blink::WebURLRequest& request) {
 void ManifestDownloader::didReceiveResponse(
     blink::WebURLLoader* loader,
     const blink::WebURLResponse& response) {
-  if (response.httpStatusCode() != 200)
-    pp_nacl_error_ = PP_NACL_ERROR_MANIFEST_LOAD_URL;
+//  if (response.httpStatusCode() != 200)
+//    pp_nacl_error_ = PP_NACL_ERROR_MANIFEST_LOAD_URL;
   status_code_ = response.httpStatusCode();
 }
 
@@ -74,6 +74,8 @@ void ManifestDownloader::didFail(
     const blink::WebURLError& error) {
   // TODO(teravest): Find a place to share this code with PepperURLLoaderHost.
   pp_nacl_error_ = PP_NACL_ERROR_MANIFEST_LOAD_URL;
+  LOG(INFO) << __LINE__;
+  LOG(INFO) << error.reason;
   if (error.domain.equals(blink::WebString::fromUTF8(net::kErrorDomain))) {
     switch (error.reason) {
       case net::ERR_ACCESS_DENIED:
diff --git a/components/nacl/renderer/nexe_load_manager.cc b/components/nacl/renderer/nexe_load_manager.cc
index 0844e1a..769978c 100644
--- a/components/nacl/renderer/nexe_load_manager.cc
+++ b/components/nacl/renderer/nexe_load_manager.cc
@@ -149,7 +149,6 @@ void NexeLoadManager::NexeFileDidOpen(int32_t pp_error,
                                       base::TimeDelta time_since_open) {
   // Check that we are on the main renderer thread.
   DCHECK(content::RenderThread::Get());
-  VLOG(1) << "Plugin::NexeFileDidOpen (pp_error=" << pp_error << ")";
   HistogramHTTPStatusCode(
       is_installed_ ? "NaCl.HttpStatusCodeClass.Nexe.InstalledApp" :
                       "NaCl.HttpStatusCodeClass.Nexe.NotInstalledApp",
diff --git a/components/nacl/renderer/ppb_nacl_private_impl.cc b/components/nacl/renderer/ppb_nacl_private_impl.cc
index 88a5cb3..5be6768 100644
--- a/components/nacl/renderer/ppb_nacl_private_impl.cc
+++ b/components/nacl/renderer/ppb_nacl_private_impl.cc
@@ -678,10 +678,11 @@ PP_FileHandle OpenNaClExecutable(PP_Instance instance,
                                  const char* file_url,
                                  uint64_t* nonce_lo,
                                  uint64_t* nonce_hi) {
+  LOG(INFO) << file_url;
   // Fast path only works for installed file URLs.
   GURL gurl(file_url);
-  if (!gurl.SchemeIs("chrome-extension"))
-    return PP_kInvalidFileHandle;
+//  if (!gurl.SchemeIs("chrome-extension"))
+//    return PP_kInvalidFileHandle;
 
   content::PepperPluginInstance* plugin_instance =
       content::PepperPluginInstance::Get(instance);
@@ -693,8 +694,8 @@ PP_FileHandle OpenNaClExecutable(PP_Instance instance,
   // another app.
   blink::WebSecurityOrigin security_origin =
       plugin_instance->GetContainer()->element().document().securityOrigin();
-  if (!security_origin.canRequest(gurl))
-    return PP_kInvalidFileHandle;
+//  if (!security_origin.canRequest(gurl))
+//    return PP_kInvalidFileHandle;
 
   IPC::PlatformFileForTransit out_fd = IPC::InvalidPlatformFileForTransit();
   IPC::Sender* sender = content::RenderThread::Get();
@@ -844,6 +845,7 @@ void RequestNaClManifest(PP_Instance instance,
   }
 
   const GURL& base_url = load_manager->manifest_base_url();
+  LOG(INFO) << base_url.spec();
   if (base_url.SchemeIs("data")) {
     GURL gurl(base_url);
     std::string mime_type;
diff --git a/content/browser/renderer_host/pepper/pepper_file_io_host.cc b/content/browser/renderer_host/pepper/pepper_file_io_host.cc
index 7822891..392d6e2 100644
--- a/content/browser/renderer_host/pepper/pepper_file_io_host.cc
+++ b/content/browser/renderer_host/pepper/pepper_file_io_host.cc
@@ -405,8 +405,9 @@ void PepperFileIOHost::DidCloseFile(base::File::Error /*error*/) {
 
 int32_t PepperFileIOHost::OnHostMsgRequestOSFileHandle(
     ppapi::host::HostMessageContext* context) {
-  if (open_flags_ != PP_FILEOPENFLAG_READ && file_system_host_->ChecksQuota())
-    return PP_ERROR_FAILED;
+  LOG(INFO) << __LINE__ << " " << open_flags_ << " " << file_system_host_->ChecksQuota();
+//  if (open_flags_ != PP_FILEOPENFLAG_READ && file_system_host_->ChecksQuota())
+//    return PP_ERROR_FAILED;
 
   GURL document_url =
       browser_ppapi_host_->GetDocumentURLForInstance(pp_instance());
diff --git a/ppapi/proxy/file_io_resource.cc b/ppapi/proxy/file_io_resource.cc
index e119dd5..4cd2541 100644
--- a/ppapi/proxy/file_io_resource.cc
+++ b/ppapi/proxy/file_io_resource.cc
@@ -131,6 +131,7 @@ int32_t FileIOResource::Open(PP_Resource file_ref,
 
   PPB_FileRef_API* file_ref_api = enter_file_ref.object();
   const FileRefCreateInfo& create_info = file_ref_api->GetCreateInfo();
+  LOG(INFO) << create_info.internal_path;
   if (!FileSystemTypeIsValid(create_info.file_system_type)) {
     NOTREACHED();
     return PP_ERROR_FAILED;
