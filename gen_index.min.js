var _TOPBAR_HEIGHT = 32, _ALLOWED_VALUES_MAP = {formFactor: ["phone", "tablet"], fpsLimit: [10, 12, 15, 20, 30], ndkAbi: ["armeabi", "armeabi-v7a"], orientation: ["landscape", "portrait"], resize: ["disabled", "scale"], stderrLog: "DVIWEFS".split("")}, _common = {cachedRuntimeManifestPromise: null}, _STRING_DELIMITER = "\u0001", _TARGET_ANDROID_DP = {phone: {"long": 640, "short": 360}, tablet: {"long": 1280, "short": 800}};
function getTimeZone() {
  var a = -(new Date).getTimezoneOffset(), b = 0 <= a ? "+" : "-", a = Math.abs(a), c = String(Math.floor(a / 60)), a = String(a % 60);
  1 == c.length && (c = "0" + c);
  1 == a.length && (a = "0" + a);
  return"GMT" + b + c + ":" + a
}
function getLocale() {
  var a = window.navigator.language;
  "es-419" == a && (a = "es");
  a = a.split("-");
  return{language: a[0], country: a[1]}
}
function getCurrentZoom() {
  if (!document.body)return 1;
  var a = document.createElementNS("http://www.w3.org/2000/svg", "svg");
  a.style.cssText = "position: absolute;visibility: hidden;";
  document.body.appendChild(a);
  var b = a.currentScale;
  document.body.removeChild(a);
  return b
}
var arcMetadata;
(function () {
  function a() {
    this.defaults_ = {allowEmptyActivityStack: !1, apkList: [], canRotate: !1, disableAutoBackButton: !1, enableAdb: !1, enableArcStrace: !1, enableExternalDirectory: !1, enableGlErrorCheck: !1, enableSynthesizeTouchEventsOnWheel: !0, formFactor: "phone", fpsLimit: 60, isSlowDebugRun: !1, jdbPort: 0, logLoadProgress: !1, minimumLaunchDelay: 0, name: "", ndkAbi: "", orientation: "portrait", packageName: "org.chromium.arc", resize: "disabled", shell: [], stderrLog: "S", useGoogleContactsSyncAdapter: !1, usePlayServices: [], sleepOnBlur: !0};
    this.data_ = {};
    this.computedValues_ = {};
    if (chrome.runtime && chrome.runtime.getManifest) {
      var a = chrome.runtime.getManifest();
      this.data_ = a.arc_metadata || {};
      this.data_.enablePlayServices && (this.data_.usePlayServices = ["ALL"], delete this.data_.enablePlayServices);
      this.validateData_();
      this.computeValues_(a)
    }
  }

  a.prototype.get = function () {
    var a = {}, c;
    for (c in this.defaults_)this.defaults_.hasOwnProperty(c) && (this.data_.hasOwnProperty(c) ? a[c] = this.data_[c] : a[c] = this.defaults_[c]);
    return this.addComputedValues_(a)
  };
  a.prototype.getValue = function (a) {
    if (this.data_.hasOwnProperty(a))return this.data_[a];
    if (this.computedValues_.hasOwnProperty(a))return this.computedValues_[a];
    if (this.defaults_.hasOwnProperty(a))return this.defaults_[a];
    throw"unknown arc_metadata param: " + a;
  };
  a.prototype.validateData_ = function () {
    for (var a in this.data_)if (this.data_.hasOwnProperty(a) && (this.defaults_.hasOwnProperty(a) ? typeof this.data_[a] !== typeof this.defaults_[a] && (console.error('Type mismatch of "' + a + '" in ARC metadata'), console.group(),
      console.error("Default type: " + typeof this.defaults_[a]), console.error("Current type: " + typeof this.data_[a]), console.groupEnd()) : console.error('Unknown property "' + a + '" in ARC metadata')), a in _ALLOWED_VALUES_MAP) {
      var c = this.data_[a], d = _ALLOWED_VALUES_MAP[a];
      -1 == d.indexOf(c) && (console.group(), console.error("Invalid value of " + a + ": " + c), console.error("It must be one of: " + d.join(", ")), console.groupEnd())
    }
  };
  a.prototype.getAndroidDensityDpi_ = function (a, c) {
    var d = [120, 160, 213, 240, 320, 400, 480, 640], e =
      160 * c;
    "tablet" == a && (e *= 0.75);
    var f = d.map(function (a) {
      return Math.abs(a - e)
    }), f = f.indexOf(Math.min.apply(Math, f));
    return d[f]
  };
  a.prototype.computeWindowSizeInChromeDips_ = function (a, c) {
    var d = this.getAndroidDensityDpi_(a, c), e = Math.ceil(_TARGET_ANDROID_DP[a].short * (d / 160) / c), f = Math.ceil(_TARGET_ANDROID_DP[a].long * (d / 160) / c);
    return{"short": e, "long": f, androidDensityDpi: d}
  };
  a.prototype.computeValues_ = function (a) {
    var c = window.devicePixelRatio / getCurrentZoom(), d = this.getValue("formFactor"), c = this.computeWindowSizeInChromeDips_(d,
      c);
    if ("landscape" == this.getValue("orientation"))var d = c.long, e = c.short; else d = c.short, e = c.long;
    this.computedValues_.width = d;
    this.computedValues_.height = e;
    this.computedValues_.androidDensityDpi = c.androidDensityDpi;
    a.oauth2 && a.oauth2.scopes && -1 != a.oauth2.scopes.indexOf("https://www.google.com/m8/feeds") && (this.data_.useGoogleContactsSyncAdapter = !0)
  };
  a.prototype.addComputedValues_ = function (a) {
    for (var c in this.computedValues_)this.computedValues_.hasOwnProperty(c) && (a[c] = this.computedValues_[c]);
    return a
  };
  arcMetadata = new a
})();
function getRuntimeManifestURL() {
  var a = chrome.runtime.getManifest()["import"][0].id;
  return chrome.runtime.getURL("/_modules/" + a + "/manifest.json")
}
function requestRuntimeManifest() {
  if (null !== _common.cachedRuntimeManifestPromise)return _common.cachedRuntimeManifestPromise;
  var a = getRuntimeManifestURL();
  _common.cachedRuntimeManifestPromise = PromiseWrap.xmlHttpRequest("GET", a).then(JSON.parse);
  return _common.cachedRuntimeManifestPromise
}
function getManifestItem(a, b, c) {
  return a.hasOwnProperty(b) ? a[b] : c
}
function getBuildTagFromManifest(a) {
  return getManifestItem(a, "arc_build_tag", "unknown")
}
function getCwsInstalled() {
  return new Promise(function (a, b) {
    requestRuntimeManifest().then(function (b) {
      "update_url"in b ? a(!0) : a(!1)
    })
  })
};
var childPlugins = [];
function ChildPlugin(a, b, c, d, e) {
  this.active = !0;
  this.args_ = b.args;
  this.backgroundPage_ = null;
  this.command_ = b.plugin;
  this.container_ = a;
  this.currentWorkingDirectory_ = b.currentworkingdirectory;
  this.envs_ = b.envs;
  this.handleExitMessage_ = c;
  this.handleStderrMessage_ = e;
  this.handleStdoutMessage_ = d;
  this.loaded_ = !1;
  this.plugin_ = null;
  this.preopened_fd_args_ = b.preopened_fd_args;
  this.preopened_fd_names_ = b.preopened_fd_names;
  this.requestId_ = b.requestid;
  this.requester_ = b.requester;
  this.timeoutId_ = null;
  this.timeout_ =
    2;
  this.create_()
}
ChildPlugin.prototype.create_ = function () {
  var a = arcMetadata.get();
  this.plugin_ = document.createElement("embed");
  this.plugin_.setAttribute("src", "arc.nmf");
  this.plugin_.setAttribute("type", "application/x-nacl");
  this.plugin_.setAttribute("plugintype", this.command_);
  this.currentWorkingDirectory_ && this.plugin_.setAttribute("current_working_directory", this.currentWorkingDirectory_);
  this.plugin_.setAttribute("args", this.args_.join(_STRING_DELIMITER));
  this.envs_ && this.plugin_.setAttribute("envs", this.envs_.join(_STRING_DELIMITER));
  this.preopened_fd_args_ && this.preopened_fd_names_ && (this.plugin_.setAttribute("preopened_fd_args", this.preopened_fd_args_.join(_STRING_DELIMITER)), this.plugin_.setAttribute("preopened_fd_names", this.preopened_fd_names_.join(_STRING_DELIMITER)));
  this.plugin_.setAttribute("requestid", this.requestId_);
  this.plugin_.setAttribute("requester", this.requester_);
  this.plugin_.setAttribute("width", 0);
  this.plugin_.setAttribute("height", 0);
  this.plugin_.setAttribute("packagename", a.packageName);
  this.plugin_.setAttribute("stderrlog",
    a.stderrLog);
  this.plugin_.setAttribute("enablearcstrace", a.enableArcStrace);
  this.plugin_.setAttribute("timezone", getTimeZone());
  var b = getLocale();
  this.plugin_.setAttribute("language", b.language);
  b.country && this.plugin_.setAttribute("country", b.country);
  "org.chromium.arc.system" == a.packageName && this.plugin_.setAttribute("enable_stdio_bridge", !0);
  console.time("ChildPlugin " + this.requester_ + ":" + this.requestId_ + ":" + this.args_[0] + "(" + this.command_ + ") Run");
  this.container_.appendChild(this.plugin_);
  this.plugin_.addEventListener("message",
    this.handleMessageEvent_.bind(this), !1);
  this.plugin_.addEventListener("crash", function (a) {
    this.postExitMessage_(this.createExitMessage_(-1), "Plugin process crashed")
  }.bind(this), !1);
  this.timeoutId_ = setTimeout(function () {
    this.timeoutId_ = null;
    if (!this.loaded_) {
      var a = this.container_;
      this.remove("timeout to spawn ChildPlugin process: " + this.args_[0] + "(" + this.command_ + "), " + this.args_.join(" "));
      32 <= this.timeout_ ? (console.error("give up to spawn ChildPlugin process."), this.postExitMessage_(this.createExitMessage_(-1))) :
        (this.timeout_ *= 2, console.log("retry to spawn with timeout " + this.timeout_ + "sec."), this.active = !0, this.container_ = a, this.create_())
    }
  }.bind(this), 1E3 * this.timeout_);
  this.backgroundPage_ = window.arc ? window.arc.backgroundPage : window
};
ChildPlugin.prototype.handleMessageEvent_ = function (a) {
  if (this.active)if (a = a.data, a.constructor == ArrayBuffer)this.backgroundPage_.crashReporter.reportCrash("minidump on " + this.command_, a); else {
    if ("jsPlugin" == a.namespace) {
      if ("loadResult" == a.command) {
        a.data.result ? (a = this.command_, 0 < this.args_.length && (a += "/" + this.args_[0]), console.log("the child process has been loaded: " + a), this.loaded_ = !0) : this.remove("Cannot load plugin process");
        return
      }
      if ("crashLogMessage" == a.command)return
    }
    "jsChildplugin" != a.namespace ?
      this.remove('Received invalid namespace message. Namespace: "' + a.namespace + '", Command: "' + a.command + '"') : "spawn" == a.command ? ChildPlugin.handleChildPluginMessage(a, this.plugin_.postMessage.bind(this.plugin_), this.handleStdoutMessage_, this.handleStderrMessage_) : "stdout" == a.command ? (a.namespace = "androidChildplugin", this.handleStdoutMessage_ && this.handleStdoutMessage_(a)) : "stderr" == a.command ? (a.namespace = "androidChildplugin", this.handleStderrMessage_ && this.handleStderrMessage_(a)) : "exit" == a.command ?
      (a.namespace = this.requester_, this.postExitMessage_(a)) : this.remove("Received unknown childplugin command: " + a.command)
  }
};
ChildPlugin.prototype.postExitMessage_ = function (a, b) {
  this.remove(b) && this.handleExitMessage_(a)
};
ChildPlugin.prototype.createExitMessage_ = function (a) {
  return{namespace: "androidChildplugin", command: "exit", data: {requestid: this.requestId_, requester: this.requester_, result: a}}
};
ChildPlugin.prototype.remove = function (a) {
  if (!this.active)return!1;
  this.active = !1;
  this.timeoutId_ && (clearTimeout(this.timeoutId_), this.timeoutId_ = null);
  console.timeEnd("ChildPlugin " + this.requester_ + ":" + this.requestId_ + ":" + this.args_[0] + "(" + this.command_ + ") Run");
  a && console.log(a);
  this.container_.removeChild(this.plugin_);
  this.plugin_ = this.container_ = null;
  childPlugins = childPlugins.filter(function (a) {
    a != this
  });
  return!0
};
ChildPlugin.handleChildPluginMessage = function (a, b, c, d) {
  "spawn" == a.command ? childPlugins.push(new ChildPlugin(document.getElementById("appdiv"), a.data, b, c, d)) : (console.log("Received unknown childplugin message: "), console.log(a))
};
function PhotoBooth(a) {
  this.plugin_ = a;
  this.videoTrack_ = this.cancelButton_ = this.captureButton_ = this.video_ = this.backdrop_ = null;
  this.keyEventHandler_ = this.handleKeyEvent_.bind(this)
}
PhotoBooth.prototype.addMessageListeners = function () {
  this.plugin_.addMessageListener("jsCamera", this.handleMessage_.bind(this))
};
PhotoBooth.prototype.handleKeyEvent_ = function (a) {
  27 == a.keyCode && this.cancelCapture_()
};
PhotoBooth.prototype.handleMessage_ = function (a) {
  if ("captureImageRequest" != a.command)console.error("Received unknown camera message: ", a); else {
    this.plugin_.postMessage({namespace: "pluginInputManager", command: "suspendInput", data: {}});
    this.createElements_();
    this.cancelButton_.addEventListener("click", this.cancelCapture_.bind(this));
    document.body.appendChild(this.backdrop_);
    document.addEventListener("keyup", this.keyEventHandler_);
    var b = this;
    this.video_.addEventListener("playing", function () {
      b.captureButton_.className =
        "ready";
      b.captureButton_.addEventListener("click", b.finishCapture_.bind(b))
    });
    navigator.webkitGetUserMedia({video: !0}, function (a) {
      b.video_.src = window.URL.createObjectURL(a);
      b.videoTrack_ = a.getVideoTracks()[0]
    }, function (a) {
      console.error("Video stream failed to open", a);
      b.cancelCapture_()
    })
  }
};
PhotoBooth.prototype.sendResponse_ = function (a) {
  this.plugin_.postMessage({namespace: "androidCameraIntentHandler", command: "captureImageResponse", data: {result: a}})
};
PhotoBooth.prototype.createElements_ = function () {
  this.backdrop_ = document.createElement("div");
  this.video_ = document.createElement("video");
  this.cancelButton_ = document.createElement("a");
  this.captureButton_ = document.createElement("a");
  this.videoTrack_ = null;
  this.backdrop_.setAttribute("id", "photo-booth");
  this.video_.setAttribute("autoplay", "autoplay");
  this.video_.addEventListener("playing", this.handlePlaying_.bind(this));
  this.backdrop_.appendChild(this.video_);
  this.captureButton_.setAttribute("id", "capture-button");
  this.backdrop_.appendChild(this.captureButton_);
  this.cancelButton_.setAttribute("id", "cancel-button");
  this.backdrop_.appendChild(this.cancelButton_)
};
PhotoBooth.prototype.close_ = function () {
  this.plugin_.postMessage({namespace: "pluginInputManager", command: "resumeInput", data: {}});
  null != this.videoTrack_ && (this.videoTrack_.stop(), this.videoTrack_ = null);
  document.body.removeChild(this.backdrop_);
  document.removeEventListener("keyup", this.keyEventHandler_);
  this.captureButton_ = this.cancelButton_ = this.video_ = this.backdrop_ = null
};
PhotoBooth.prototype.finishCapture_ = function () {
  var a = document.createElement("canvas");
  a.setAttribute("width", this.video_.videoWidth);
  a.setAttribute("height", this.video_.videoHeight);
  a.getContext("2d").drawImage(this.video_, 0, 0);
  this.sendResponse_(a.toDataURL("image/jpeg"));
  this.close_()
};
PhotoBooth.prototype.cancelCapture_ = function () {
  this.sendResponse_();
  this.close_()
};
PhotoBooth.prototype.handlePlaying_ = function () {
  this.video_ && (this.video_.style.display = "block", this.video_.style.top = (window.innerHeight - this.video_.offsetHeight) / 2 + "px")
};
var PromiseWrap = {chooseEntry: function (a) {
  return new Promise(function (b, c) {
    chrome.fileSystem.chooseEntry(a, function (a) {
      a ? b(a) : c(Error("User cancelled."))
    })
  })
}, isFilesystemRestorable: function (a) {
  return new Promise(function (b, c) {
    chrome.fileSystem.isRestorable(a, function (d) {
      d ? b(a) : c(Error("The filesystem is not restorable."))
    })
  })
}, restoreFilesystem: function (a) {
  return new Promise(function (b, c) {
    chrome.fileSystem.restoreEntry(a, function (a) {
      a ? b(a) : c(Error(chrome.runtime.lastError.message))
    })
  })
}, getAuthToken: function (a) {
  return new Promise(function (b, c) {
    chrome.identity.getAuthToken(a, function (a) {
      chrome.runtime.lastError ? c(Error(chrome.runtime.lastError.message)) : b(a)
    })
  })
}, getPlatformInfo: function () {
  return new Promise(function (a, b) {
    chrome.runtime.getPlatformInfo(function (b) {
      a(b)
    })
  })
}, getProfileUserInfo: function () {
  return new Promise(function (a, b) {
    chrome.identity && chrome.identity.getProfileUserInfo ? chrome.identity.getProfileUserInfo(function (c) {
      chrome.runtime.lastError ? b(Error(chrome.runtime.lastError.message)) : a(c)
    }) : b(Error("chrome.identity.getProfileUserInfo is unavailable. Please make sure your Chrome is at least M37."))
  })
},
  removeCachedAuthToken: function (a) {
    return new Promise(function (b, c) {
      chrome.identity.removeCachedAuthToken(a, function () {
        chrome.runtime.lastError ? c(Error(chrome.runtime.lastError.message)) : b()
      })
    })
  }, getLocalStorageValue: function (a) {
    return new Promise(function (b, c) {
      chrome.storage.local.get(a, function (d) {
        d.hasOwnProperty(a) ? b(d[a]) : (chrome.runtime.lastError && console.error("Error on reading local storage, continue anyway: " + chrome.runtime.lastError.message), c(Error("There is no retained filesystem key.")))
      })
    })
  },
  setLocalStorageValue: function (a) {
    return new Promise(function (b, c) {
      chrome.storage.local.set(a, function (a) {
        chrome.runtime.lastError ? c(Error("Cannot save email to local storage: " + chrome.runtime.lastError.message)) : b()
      })
    })
  }, webkitRequestFileSystem: function (a, b) {
    return new Promise(function (c, d) {
      window.webkitRequestFileSystem(a, b, function (a) {
        c(a)
      }, function (a) {
        d(Error(a))
      })
    })
  }, xmlHttpRequest: function (a, b) {
    return new Promise(function (c, d) {
      var e = new XMLHttpRequest;
      e.open(a, b, !0);
      e.onreadystatechange = function () {
        try {
          4 ==
          e.readyState && (200 == e.status ? c(e.responseText) : d(Error(e.responseText)))
        } catch (a) {
          d(Error(a))
        }
      };
      e.send()
    })
  }, getDirectory: function (a, b, c) {
    return new Promise(function (d, e) {
      a.getDirectory(b, c, function (a) {
        d(a)
      }, function (a) {
        e(Error(a))
      })
    })
  }, getFile: function (a, b, c) {
    return new Promise(function (d, e) {
      a.getFile(b, c, function (a) {
        d(a)
      }, function (a) {
        e(Error(a))
      })
    })
  }, getMetadata: function (a) {
    return new Promise(function (b, c) {
      a.getMetadata(function (a) {
        b(a)
      }, function (a) {
        c(Error(a))
      })
    })
  }, mountExternalFile: function (a, b, c) {
    return new Promise(function (d, e) {
      b.postMessageAndReply_("pluginFileSystemManager", "mountExternalFile", {fileSystem: a.filesystem, fullPath: a.fullPath, writable: c}, function (a) {
        d(a)
      })
    })
  }, moveTo: function (a, b, c) {
    return new Promise(function (d, e) {
      a.moveTo(b, c, function (a) {
        d(a)
      }, function (a) {
        e(Error(a))
      })
    })
  }};
function AuthManager(a) {
  this.plugin_ = a;
  a.addMessageListener("jsChromeIdentity", this.handleAuthMessage_.bind(this))
}
AuthManager.prototype.parseScope_ = function (a) {
  return a && 0 == a.indexOf("oauth2:") && 0 > a.indexOf(":server:client_id:") ? a.substring(7).split(" ") : []
};
AuthManager.prototype.handleGetAuthToken_ = function (a) {
  console.log("Authentication requested", a);
  var b = function (a) {
    this.plugin_.postMessage({namespace: "androidIdentity", command: "getAuthTokenResponse", data: a})
  }.bind(this), c = {interactive: !0};
  a = this.parseScope_(a.data.tokenType);
  0 < a.length && (c.scopes = a);
  PromiseWrap.getAuthToken(c).then(function (a) {
    console.log("Authentication successful");
    b({token: a})
  }, function (a) {
    console.error("Authentication error", a);
    b({error: a.message})
  })
};
AuthManager.prototype.handleInvalidateAuthToken_ = function (a) {
  var b = function (a) {
    this.plugin_.postMessage({namespace: "androidAccountManagerService", command: "invalidateAuthTokenResponse", data: a})
  }.bind(this), c = a.data.token;
  PromiseWrap.removeCachedAuthToken({token: c}).then(function () {
    console.log("Removed cached auth token", c);
    b({})
  }, function (a) {
    console.error("Error occurred when removing auth token", a);
    b({error: a.message})
  })
};
AuthManager.prototype.handleAuthMessage_ = function (a) {
  "getAuthToken" == a.command ? this.handleGetAuthToken_(a) : "invalidateAuthToken" == a.command && this.handleInvalidateAuthToken_(a)
};
var FS_QUOTA = 21474836480, _FS_INIT_CALLBACK_COUNT = 3;
function FileSystemManager(a, b) {
  this.plugin_ = a;
  this.callbacks_ = [];
  this.fileSystemInitCallbackCount_ = 0;
  this.onInitializedCallback_ = b;
  this.retainedExternalFileSystemKey_ = "retainedExternalFileSystemKey";
  this.prefetchedMetadata_ = [];
  var c = this;
  a.addMessageListener("jsFileSystem", function (a) {
    c.handleMessage_(a)
  });
  "loading" == document.readyState ? document.addEventListener("DOMContentLoaded", this.prefetchFileSystemMetadata_.bind(this)) : this.prefetchFileSystemMetadata_()
}
FileSystemManager.prototype.ensureFilesAndDirectoriesCreated_ = function (a) {
  var b = "/cache /data /data/app /data/app-lib /data/dalvik-cache /data/data /data/data/org.chromium.arc /data/data/org.chromium.arc/lib /data/misc /data/misc/keystore /data/system /data/system/dropbox /data/system/ifw /data/system/inputmethod /data/system/netstats /data/system/procstats /data/system/sync /data/system/usagestats /data/system/users /data/system/users/0 /dev /storage /storage/sdcard /sys".split(" "), c = ["/data/app-lib/arc",
    "/data/app-private", "/data/system/registered_services"], d = ["/storage/sdcard/Android/data/" + this.plugin_.getMetadata().packageName, "/storage/sdcard/Android/data/com.android.providers.contacts"];
  this.plugin_.metadata_ && this.plugin_.metadata_.useGoogleContactsSyncAdapter && d.push("/storage/sdcard/Android/data/com.google.android.syncadapters.contacts");
  this.plugin_.metadata_ && this.plugin_.metadata_.usePlayServices && 0 < this.plugin_.metadata_.usePlayServices.length && d.push("/storage/sdcard/Android/data/com.google.android.gms");
  this.plugin_.metadata_ && this.plugin_.metadata_.enableExternalDirectory ? b = b.concat(["/storage/sdcard/Android", "/storage/sdcard/Android/data"].concat(d)) : c = c.concat(d);
  var e = this, f = function (a, b) {
    e.prefetchedMetadata_.push({fullPath: a, exists: !0, isFile: !1, mtime_ms: "0", size: "4096"})
  }, b = b.map(function (b) {
    return PromiseWrap.getDirectory(a.root, b, {create: !0}).then(function (a) {
      f(b, a);
      return Promise.resolve()
    }, function (a) {
      e.prefetchedMetadata_.push({fullPath: b, exists: !1});
      return Promise.resolve()
    })
  }).concat(c.map(function (b) {
    return PromiseWrap.getDirectory(a.root,
      b, {create: !1}).then(function (a) {
        f(b, a);
        return Promise.resolve()
      }, function (a) {
        e.prefetchedMetadata_.push({fullPath: b, exists: !1});
        return Promise.resolve()
      })
  }));
  return Promise.all(b).then(function () {
  }, function (a) {
    console.error(a);
    throw a;
  })
};
FileSystemManager.prototype.prefetchFileMetadata_ = function (a) {
  var b = this, c = "/data/data/com.android.settings/files/wallpaper /data/local.prop /data/security/mac_permissions.xml /data/system/accounts.db /data/system/appops.xml /data/system/appops.xml.bak /data/system/called_pre_boots.dat /data/system/devices/idc/PPAPI_Keyboard.idc /data/system/devices/keychars/PPAPI_Keyboard.kcm /data/system/devices/keylayout/Virtual.kl /data/system/display_settings.xml /data/system/display_settings.xml.bak /data/system/inputmethod/subtypes.xml /data/system/inputmethod/subtypes.xml.bak /data/system/notification_policy.xml /data/system/notification_policy.xml.bak /data/system/packages-backup.xml /data/system/packages-compat.xml /data/system/packages-compat.xml.bak /data/system/packages-stopped-backup.xml /data/system/packages-stopped.xml /data/system/packages.list /data/system/packages.xml /data/system/registered_services/android.accounts.AccountAuthenticator.xml /data/system/registered_services/android.accounts.AccountAuthenticator.xml.bak /data/system/registered_services/android.content.SyncAdapter.xml /data/system/sync/accounts.xml /data/system/sync/accounts.xml.bak /data/system/sync/pending.bin /data/system/sync/pending.xml /data/system/sync/pending.xml.bak /data/system/sync/stats.bin /data/system/sync/stats.bin.bak /data/system/sync/status.bin /data/system/sync/status.bin.bak /data/system/syncmanager.db /data/system/urigrants.xml /data/system/urigrants.xml.bak /data/system/usagestats/usage-history.xml /data/system/users/0.xml /data/system/users/0.xml.bak /data/system/users/0/accounts.db /data/system/users/0/accounts.db-journal /data/system/users/0/accounts.db-wal /data/system/users/0/package-restrictions-backup.xml /data/system/users/0/package-restrictions.xml /data/system/users/0/wallpaper /data/system/users/0/wallpaper_info.xml /data/system/users/0/wallpaper_info.xml.tmp /data/system/users/userlist.xml /data/system/users/userlist.xml.bak /data/system/wallpaper_info.xml".split(" ").map(function (c) {
    var e;
    PromiseWrap.getFile(a.root,
      c, {create: !1}).then(function (a) {
        e = a;
        return PromiseWrap.getMetadata(a)
      }).then(function (a) {
        a = {fullPath: e.fullPath, exists: !0, isFile: e.isFile, mtime_ms: String(a.modificationTime.getTime()), size: String(a.size)};
        b.prefetchedMetadata_.push(a);
        return Promise.resolve()
      }, function (a) {
        b.prefetchedMetadata_.push({fullPath: c, exists: !1});
        return Promise.resolve()
      })
  });
  return Promise.all(c).then(function () {
    return Promise.resolve()
  }, function (a) {
    console.error(a);
    throw a;
  })
};
FileSystemManager.prototype.prefetchFileSystemMetadata_ = function (a, b) {
  console.time("ARC HTML5 FS: Request FileSystem");
  var c, d = PromiseWrap.webkitRequestFileSystem(window.PERSISTENT, FS_QUOTA).then(function (a) {
    console.timeEnd("ARC HTML5 FS: Request FileSystem");
    c = a;
    return Promise.resolve()
  }), e = this, d = [d.then(function () {
    console.time("ARC HTML5 FS: ensureFilesAndDirectoriesCreated_");
    return e.ensureFilesAndDirectoriesCreated_(c)
  }).then(function () {
    console.timeEnd("ARC HTML5 FS: ensureFilesAndDirectoriesCreated_");
    e.postFileSystemReadyMessageIfNeeded();
    return Promise.resolve()
  }), d.then(function () {
    console.time("ARC HTML5 FS: prefetchFileMetadata_");
    return e.prefetchFileMetadata_(c)
  }).then(function () {
    console.timeEnd("ARC HTML5 FS: prefetchFileMetadata_");
    e.postFileSystemReadyMessageIfNeeded();
    return Promise.resolve()
  })];
  return Promise.all(d).then(function () {
  }, function (a) {
    console.error(a);
    throw a;
  })
};
FileSystemManager.prototype.postMessage_ = function (a, b, c) {
  this.plugin_.postMessage({namespace: a, command: b, data: c})
};
FileSystemManager.prototype.postMessageAndReply_ = function (a, b, c, d) {
  this.postMessage_(a, b, {messageId: this.callbacks_.length, info: c});
  this.callbacks_.push(d)
};
FileSystemManager.prototype.updateExtDirButtonVisibility_ = function (a) {
  document.getElementById("extdir-button").className = a ? "button" : "hiddenbutton"
};
FileSystemManager.prototype.handleMessage_ = function (a) {
  void 0 != a.data.messageId && a.data.messageId < this.callbacks_.length ? (this.callbacks_[a.data.messageId](a.data), this.callbacks_[a.data.messageId] = null) : "openExternalFile" == a.command ? this.handleOpenExternalFileMessage_(a.data) : "openExternalDirectory" == a.command ? this.handleOpenExternalDirectoryMessage_() : "requestFileFromFileHandler" == a.command && this.handleRequestFileFromFileHandler_()
};
FileSystemManager.prototype.sendMountExtDirMessage_ = function (a, b) {
  this.postMessageAndReply_("pluginFileSystemManager", "mountExternalDirectory", {fileSystem: a, fullPath: b, writable: !0}, function () {
  })
};
FileSystemManager.prototype.handleOpenExternalDirectoryMessage_ = function () {
  console.assert(this.plugin_.getMetadata().enableExternalDirectory);
  var a = this;
  PromiseWrap.getLocalStorageValue(a.retainedExternalFileSystemKey_).then(function (a) {
    return PromiseWrap.isFilesystemRestorable(a)
  }).then(function (a) {
    return PromiseWrap.restoreFilesystem(a)
  }).then(function (b) {
    a.sendMountExtDirMessage_(b.filesystem, b.fullPath);
    a.updateExtDirButtonVisibility_(!0)
  }, function (b) {
    a.openAndMountExternalDirectory(!1)
  })
};
FileSystemManager.prototype.postFileSystemReadyMessageIfNeeded = function () {
  this.fileSystemInitCallbackCount_++;
  console.log("File system initialization " + this.fileSystemInitCallbackCount_ + "/" + _FS_INIT_CALLBACK_COUNT);
  if (this.fileSystemInitCallbackCount_ == _FS_INIT_CALLBACK_COUNT)this.postMessage_("pluginFileSystemManager", "ready", {value: this.prefetchedMetadata_}); else if (this.fileSystemInitCallbackCount_ == _FS_INIT_CALLBACK_COUNT - 1)this.onInitializedCallback_()
};
FileSystemManager.prototype.openAndMountExternalDirectory = function (a) {
  if (this.plugin_.getMetadata().enableExternalDirectory) {
    var b = this;
    PromiseWrap.chooseEntry({type: "openDirectory"}).then(function (c) {
      a && b.postMessage_("pluginFileSystemManager", "resetExternalDirectory", {});
      b.sendMountExtDirMessage_(c.filesystem, c.fullPath);
      b.updateExtDirButtonVisibility_(!0);
      var d = {};
      d[b.retainedExternalFileSystemKey_] = chrome.fileSystem.retainEntry(c);
      chrome.storage.local.set(d, function () {
      })
    }, function (a) {
      if ("User cancelled." !=
        a.message)throw a;
    })
  }
};
FileSystemManager.prototype.handleOpenExternalFileMessage_ = function (a) {
  var b = {type: a.type.valueOf()};
  "openFile" == a.type ? b.accepts = [
    {mimeTypes: a.acceptTypes.valueOf()}
  ] : b.suggestedName = a.suggestedName.valueOf();
  var c = this;
  PromiseWrap.chooseEntry(b).then(function (b) {
    return PromiseWrap.mountExternalFile(b, c, "saveFile" == a.type)
  }).then(function (b) {
    c.postMessage_(a.requester, "openExternalFileResponse", {result: !0, path: b.info.mountPoint})
  }, function (b) {
    "User cancelled." != b.message && console.error(b);
    c.postMessage_(a.requester,
      "openExternalFileResponse", {result: !1})
  })
};
FileSystemManager.prototype.handleRequestFileFromFileHandler_ = function () {
  var a = window.arc.launchArgs.items;
  if (a && a.length) {
    var b = a[0].type, c = this;
    PromiseWrap.mountExternalFile(a[0].entry, c, !0).then(function (a) {
      c.plugin_.postMessage({namespace: "androidFileHandler", command: "requestFileFromFileHandlerResponse", data: {result: !0, path: a.info.mountPoint, mimeType: b}})
    }, function (a) {
      console.error(a);
      c.plugin_.postMessage({namespace: "androidFileHandler", command: "requestFileFromFileHandlerResponse", data: {result: !1}})
    })
  }
};
function GeoLocationManager(a) {
  this.plugin_ = a;
  this.timer_ = this.interval_ = 0;
  a.addMessageListener("jsGeolocation", this.handleMessage_.bind(this))
}
GeoLocationManager.prototype.updatePosition_ = function (a) {
  0 != this.interval_ && (this.plugin_.postMessage({namespace: "androidGeolocation", command: "report", data: {latitude: a.coords.latitude, longitude: a.coords.longitude, accuracy: a.coords.accuracy, timestamp: a.timestamp}}), this.timer_ = setTimeout(this.requestPosition_.bind(this), this.interval_))
};
GeoLocationManager.prototype.reportError_ = function (a) {
  if (0 != this.interval_) {
    var b = 0;
    switch (a.code) {
      case a.PERMISSION_DENIED:
        a = "Permission denied: " + a.message;
        b = 1;
        break;
      case a.POSITION_UNAVAILABLE:
        a = "Position unavailable: " + a.message;
        break;
      case a.TIMEOUT:
        a = "Request timed out: " + a.message;
        break;
      default:
        a = "Unknown error: " + a + " / " + a.message
    }
    this.plugin_.postMessage({namespace: "androidGeolocation", command: "error", data: {permanent: b, text: a}});
    this.timer_ = setTimeout(this.requestPosition_.bind(this), this.interval_)
  }
};
GeoLocationManager.prototype.requestPosition_ = function (a) {
  navigator.geolocation.getCurrentPosition(this.updatePosition_.bind(this), this.reportError_.bind(this))
};
GeoLocationManager.prototype.startTracking_ = function (a) {
  var b = 0 != this.interval_;
  this.interval_ = 0 < a ? a : 5E3;
  b ? this.timer_ && (clearTimeout(this.timer_), this.timer_ = 0, this.requestPosition_()) : this.requestPosition_()
};
GeoLocationManager.prototype.stopTracking_ = function () {
  this.interval_ = 0;
  0 != this.timer_ && (clearTimeout(this.timer_), this.timer_ = 0)
};
GeoLocationManager.prototype.handleMessage_ = function (a) {
  "start" == a.command ? this.startTracking_(a.data && a.data.interval ? a.data.interval : 0) : "stop" == a.command ? this.stopTracking_() : console.log("Unknown geolocation command[" + a.command + "]")
};
var notifications = chrome.notifications;
function NotificationManager(a) {
  notifications && (this.activeIds_ = {}, this.plugin_ = a, notifications.onClosed.addListener(this.postMessage_.bind(this, "onClosed")), notifications.onClicked.addListener(this.onClicked_.bind(this)), notifications.onButtonClicked.addListener(this.postMessage_.bind(this, "onButtonClicked")), a.addMessageListener("jsNotification", this.handleMessage_.bind(this)))
}
NotificationManager.prototype.onClicked_ = function (a) {
  this.plugin_.showWindow();
  this.postMessage_("onClicked", a, null)
};
NotificationManager.prototype.postMessage_ = function (a, b, c) {
  this.plugin_.postMessage({namespace: "androidNotification", command: a, data: {id: b, extra: c}})
};
NotificationManager.prototype.getOptionsFromMessage_ = function (a) {
  return JSON.parse(JSON.stringify(a.data.notification))
};
NotificationManager.prototype.addNotification_ = function (a) {
  var b = a.data.id.valueOf();
  this.activeIds_[b] = !0;
  a = this.getOptionsFromMessage_(a);
  notifications.create(b, a, function () {
  })
};
NotificationManager.prototype.updateNotification_ = function (a) {
  var b = a.data.id.valueOf();
  a = this.getOptionsFromMessage_(a);
  notifications.update(b, a, function () {
  })
};
NotificationManager.prototype.removeNotification_ = function (a) {
  delete this.activeIds_[a];
  notifications.clear(a, function () {
  })
};
NotificationManager.prototype.destroy = function () {
  var a = [], b;
  for (b in this.activeIds_)a.push(b);
  for (b = 0; b < a.length; ++b)this.removeNotification_(a[b])
};
NotificationManager.prototype.handleMessage_ = function (a) {
  "addNotification" == a.command ? this.addNotification_(a) : "updateNotification" == a.command ? this.updateNotification_(a) : "removeNotification" == a.command ? this.removeNotification_(a.data.id.valueOf()) : console.log("Unknown notification command[" + a.command + "]")
};
function Shell(a) {
  this.plugin_ = a;
  this.nextId_ = 0;
  this.sessions_ = {};
  a.addMessageListener("jsShell", this.handleMessage_.bind(this))
}
Shell.prototype.shell = function (a, b, c) {
  var d = this.nextId_++;
  b = {id_: d, onDataCallback_: b, onClosedCallback_: c};
  b.close = this.close_.bind(this, b);
  this.sessions_[d] = b;
  this.plugin_.postMessage({namespace: "androidShell", command: "open", data: {id: d, commandLine: a}});
  return b
};
Shell.prototype.close_ = function (a) {
  this.plugin_.postMessage({namespace: "androidShell", command: "close", data: {id: a.id_}})
};
Shell.prototype.handleMessage_ = function (a) {
  console.assert("jsShell" == a.namespace);
  var b = this.sessions_[a.data.id];
  console.assert(b);
  if ("close" == a.command) {
    if (delete this.sessions_[b.id_], void 0 != b.onClosedCallback_)b.onClosedCallback_(b)
  } else if ("data" == a.command)if (void 0 != b.onDataCallback_)b.onDataCallback_(b, a.data.data); else console.log(a.data.data.valueOf())
};
console.time("ARC JS Init");
var __page_begin_date = new Date, _NACL_HEARTBEAT_PERIOD = 3E4, _TRUSTED_HEARTBEAT_PERIOD = 1E4, _CRASH_RESTART_THRESHOLD = 1E4, _BOOT_STEP_NO_INIT = 0, _BOOT_STEP_JAVASCRIPT_INITIALIZED = 1, _BOOT_STEP_APP_INSTANCE_STARTED = 2, _BOOT_STEP_PACKAGE_DEXOPTED = 3, _BOOT_STEP_SYSTEM_SERVER_STARTED = 4, _BOOT_STEP_DONE = 5, _MAX_BOOT_STEP = 5, _PERF_LOG_PREFIX = "perf: ";
function basename(a) {
  return a.replace(/.*\//g, "")
}
function getUptime() {
  return(new Date).getTime() - __page_begin_date.getTime()
}
function Plugin(a) {
  this.shellCommands_ = [];
  this.videoTrack_ = this.audioTrack_ = null;
  this.backButtonEnabled_ = this.isLoadingApk_ = !1;
  this.backgroundPage_ = null;
  this.cachedRotation_ = this.currentBootStep_ = 0;
  this.crashExtraInformation_ = {};
  this.isWindowInitialized_ = this.initializing_ = this.initialized_ = this.hasSeenOnResume_ = this.crashReportReceived_ = !1;
  this.isFocusedWindow_ = !0;
  this.messageListeners_ = {};
  this.metadata_ = {};
  this.reportedShutdown_ = !1;
  this.rotation_ = 0;
  this.previousZoom_ = 1;
  this.geoLocationManager_ =
    new GeoLocationManager(this);
  this.memoryMapViewer_ = null;
  this.fileSystemManager_ = new FileSystemManager(this, function () {
    this.initialized_ ? this.initializeWindow_() : this.onInitialized_ = self.initializeWindow_.bind(self)
  }.bind(this));
  this.notificationManager_ = new NotificationManager(this);
  this.authManager_ = new AuthManager(this);
  this.shellManager_ = new Shell(this);
  this.appPlugin_ = null;
  this.appPluginReady_ = !1;
  this.times_ = a;
  this.topbar_ = this.pressedButton_ = null;
  this.waitingForHeartbeat_ = !1;
  this.heartbeatInterval_ =
    null;
  this.pluginIsRemoved_ = !1;
  this.photoBooth_ = new PhotoBooth(this);
  this.addMessageListener("jsChildplugin", this.handleChildPluginMessage_.bind(this));
  this.addMessageListener("jsClipboard", this.handleClipboardMessage_.bind(this));
  this.addMessageListener("jsDisplay", this.handleDisplayMessage_.bind(this));
  this.addMessageListener("jsHeartbeat", this.handleHeartbeatMessage_.bind(this));
  this.addMessageListener("jsBrowser", this.handleBrowserMessage_.bind(this));
  this.addMessageListener("jsSystem", this.handleSystemMessage_.bind(this));
  this.addMessageListener("jsGcm", this.relayGcmMessage_.bind(this));
  this.addMessageListener("mediaStream", this.handleMediaStreamMessage_.bind(this));
  this.photoBooth_.addMessageListeners();
  "function" == typeof MemoryMapViewer && (console.log("MemoryViewer is enabled."), this.memoryMapViewer_ = new MemoryMapViewer(this));
  this.constructFromMetadata_()
}
Plugin.prototype.init = function () {
  this.initialized_ || (this.initializing_ = !0, this.createAppPlugin_(), chrome.app.window && (chrome.app.window.current().contentWindow.addEventListener("resize", this.onResized_.bind(this)), window.arc.onRelaunched = this.onRelaunched.bind(this)), getCwsInstalled().then(function (a) {
    a && chrome.runtime.getPlatformInfo(function (a) {
      //"cros" == a.os && "x86-32" != a.nacl_arch || this.showNotSupported_()
    }.bind(this))
  }.bind(this)), this.backgroundPage_ = window.arc.backgroundPage, this.initializing_ = !1)
};
Plugin.prototype.postMessage = function (a) {
  this.appPluginReady_ ? this.appPlugin_.postMessage(a) : console.error("Plugin not ready")
};
Plugin.prototype.initializeWindow_ = function () {
  this.isWindowInitialized_ || (this.doLayout_(!0), this.showWindow(), this.initializeTopBar_(document.getElementById("topbar")), this.isWindowInitialized_ = !0)
};
Plugin.prototype.addMessageListener = function (a, b) {
  this.messageListeners_[a] ? console.log("Message[" + a + "] already has listener.") : this.messageListeners_[a] = b;
  this.appPluginReady_ && this.postMessage({namespace: "pluginJSMessageProxy", command: "registerJsNamespaces", data: {namespaces: [a]}})
};
Plugin.prototype.shell = function (a, b, c) {
  return this.shellManager_.shell(a, b, c)
};
Plugin.prototype.scheduleUmaOnBackgroundPage_ = function (a, b) {
  getCwsInstalled().then(function (c) {
    c && chrome.runtime.sendMessage({namespace: "jsUma", command: "scheduleUma", data: {uma_data: a, immediate: b}})
  })
};
Plugin.prototype.reportAppShutdown_ = function (a) {
  null != this.heartbeatInterval_ && (clearInterval(this.heartbeatInterval_), this.heartbeatInterval_ = null);
  if (this.backgroundPage_ && !this.reportedShutdown_) {
    this.reportedShutdown_ = !0;
    var b = getUptime();
    this.scheduleUmaOnBackgroundPage_(["bool", "ArcRuntime.ShutdownIsCrash", a, "longtime", "ArcRuntime.Uptime", b, "enumeration", "ArcRuntime.LastBootStep", this.currentBootStep_, _MAX_BOOT_STEP + 1], !0)
  }
};
Plugin.prototype.getApkList_ = function () {
  if (void 0 == this.apkList_ && (this.apkList_ = [], 0 == this.metadata_.apkList.length)) {
    var a = chrome.extension && chrome.extension.getBackgroundPage();
    if (a && a.getStreamURL) {
      this.isLoadingApk_ = !0;
      var a = a.getStreamURL(), b = "/mnt/tmp/" + basename(a) + ".apk", c = new Worker("gen_fsworker.min.js");
      c.onmessage = function (a) {
        if ("Done" == a.data && (this.isLoadingApk_ = !1, this.onLoadingApkCompleted_))this.onLoadingApkCompleted_();
        console.log(a.data)
      }.bind(this);
      c.postMessage({quota: FS_QUOTA,
        src: a, dest: b});
      this.apkList_.push("'" + b + "'")
    }
  }
  return this.apkList_
};
Plugin.prototype.constructFromMetadata_ = function () {
  this.metadata_ = arcMetadata.get();
  this.shellCommands_ = [];
  for (var a = this.getApkList_(), b = 0; b < a.length; ++b)this.shellCommands_.push("pm", "install ", a[b], ";");
  "org.chromium.arc.system" == this.metadata_.packageName ? this.shellCommands_.push("echo", "Start system mode", ";") : 0 < this.metadata_.shell.length ? this.shellCommands_.push.apply(this.shellCommands_, this.metadata_.shell) : (this.shellCommands_.push("echo", "Start running", ";"), window.arc.launchArgs.items ?
    this.shellCommands_.push("am", "start", "-n", "org.chromium.arc/.FileHandlerLaunchHelperActivity", ";") : this.shellCommands_.push("am", "start", "$launch", "--activity-reset-task-if-needed", ";"))
};
Plugin.prototype.onResized_ = function () {
  this.doLayout_(!1)
};
Plugin.prototype.handleAppPluginMessage_ = function (a) {
  var b = this.messageListeners_[a.namespace.valueOf()];
  void 0 != b ? b(a) : (console.log("Received an unknown message:"), console.log(a))
};
Plugin.prototype.handleAppPluginLoadAttempt_ = function (a) {
  this.appPlugin_ = a;
  a.setAttribute("width", this.metadata_.width);
  a.setAttribute("height", this.metadata_.height);
  a.setAttribute("appwidth", this.metadata_.width);
  a.setAttribute("appheight", this.metadata_.height);
  a.setAttribute("ndkabi", this.metadata_.ndkAbi);
  a.setAttribute("packagename", this.metadata_.packageName);
  a.setAttribute("enableadb", this.metadata_.enableAdb.toString());
  a.setAttribute("useremail", window.arc.userEmail || "");
  a.setAttribute("enableglerrorcheck",
    this.metadata_.enableGlErrorCheck.toString());
  a.setAttribute("enablesynthesizetoucheventsonwheel", this.metadata_.enableSynthesizeTouchEventsOnWheel.toString());
  a.setAttribute("fpslimit", this.metadata_.fpsLimit.toString());
  a.setAttribute("usegooglecontactssyncadapter", this.metadata_.useGoogleContactsSyncAdapter);
  a.setAttribute("useplayservices", this.metadata_.usePlayServices.join(" "));
  a.setAttribute("stderrlog", this.metadata_.stderrLog);
  a.setAttribute("enablearcstrace", this.metadata_.enableArcStrace);
  a.setAttribute("logloadprogress", this.metadata_.logLoadProgress.toString());
  a.setAttribute("shell", this.shellCommands_.join(_STRING_DELIMITER));
  a.setAttribute("jdbport", this.metadata_.jdbPort);
  a.setAttribute("applaunchtime", this.times_.app_launch_time);
  a.setAttribute("embedtime", (new Date).getTime());
  a.setAttribute("timezone", getTimeZone());
  a.setAttribute("touchscreen", "ontouchstart"in document.documentElement);
  a.setAttribute("enableexternaldirectory", this.metadata_.enableExternalDirectory);
  a.setAttribute("androiddensitydpi",
    this.metadata_.androidDensityDpi);
  a.setAttribute("sleepOnBlur", this.metadata_.sleepOnBlur);
  var b = getLocale();
  a.setAttribute("language", b.language);
  b.country && a.setAttribute("country", b.country);
  a.setAttribute("src", "arc.nmf");
  a.setAttribute("type", "application/x-nacl");
  this.pluginIsRemoved_ && (document.getElementById("appdiv").appendChild(a), this.pluginIsRemoved_ = !1);
  console.timeEnd("ARC JS Init");
  this.setBootStep_(_BOOT_STEP_JAVASCRIPT_INITIALIZED);
  this.initialized_ = !0;
  if (this.onInitialized_)this.onInitialized_()
};
Plugin.prototype.handleAppPluginReady_ = function () {
  this.appPluginReady_ = !0;
  namespaces = Object.keys(this.messageListeners_);
  this.postMessage({namespace: "pluginJSMessageProxy", command: "registerJsNamespaces", data: {namespaces: namespaces}});
  this.pluginFinishedInitTime_ = (new Date).getTime();
  this.fileSystemManager_.postFileSystemReadyMessageIfNeeded();
  setTimeout(function () {
    this.setBackButtonEnabled_(this.metadata_.disableAutoBackButton)
  }.bind(this), 400);
  this.metadata_.isSlowDebugRun || (this.heartbeatInterval_ =
    setInterval(this.heartbeat_.bind(this), _NACL_HEARTBEAT_PERIOD));
  this.appPlugin_.focus()
};
Plugin.prototype.setBootStep_ = function (a) {
  a > _MAX_BOOT_STEP && (console.error("invalid boot step: " + a), a = _MAX_BOOT_STEP);
  this.currentBootStep_ = a
};
Plugin.prototype.clearSplash_ = function () {
  document.getElementById("splash").className = "hidden-splash"
};
Plugin.prototype.reportCrash_ = function (a, b) {
  this.reportAppShutdown_(!0);
  var c = {}, d = chrome.app.window.current();
  d && (c = {width: d.getBounds().width, height: d.getBounds().height, is_minimized: d.isMinimized(), is_maximized: d.isMaximized(), is_fullscreen: d.isFullscreen()});
  c.runtime_updated_while_running = window.arc.runtimeUpdatedWhileRunning;
  for (var e in this.crashExtraInformation_)this.crashExtraInformation_.hasOwnProperty(e) && (c[e] = this.crashExtraInformation_[e]);
  this.crashExtraInformation_ = {};
  this.backgroundPage_.crashReporter.reportCrash(a,
    b, c);
  getCwsInstalled().then(function (a) {
    a && (this.closeWindow_(), getUptime() > _CRASH_RESTART_THRESHOLD && chrome.runtime.sendMessage({namespace: "jsSystem", command: "relaunchApp"}))
  }.bind(this))
};
Plugin.prototype.createAppPlugin_ = function () {
  var a = document.getElementById("app-plugin");
  this.isLoadingApk_ && (document.getElementById("appdiv").removeChild(a), this.pluginIsRemoved_ = !0, a = document.createElement("object"), a.setAttribute("id", "app-plugin"), a.setAttribute("plugintype", "app-plugin"), a.setAttribute("tabindex", "-1"));
  a.addEventListener("message", function (a) {
    a = a.data;
    if (null != a)if (a.constructor == ArrayBuffer)this.crashReportReceived_ = !0, this.showCrash_("plugin crashed: captured minidump"),
      this.reportCrash_("captured minidump", a); else if ("jsPlugin" == a.namespace)if ("loadResult" == a.command)a.data.result ? this.handleAppPluginReady_() : (this.showCrash_("Plugin failed to load"), this.reportCrash_("loadfailure", null)); else if ("logPerfMessage" == a.command) {
      var c = a.data.message;
      a.data.suppression || console.log(c.valueOf());
      -1 != c.indexOf("App instance started") ? this.setBootStep_(_BOOT_STEP_APP_INSTANCE_STARTED) : -1 != c.indexOf("Package dexopted") ? this.setBootStep_(_BOOT_STEP_PACKAGE_DEXOPTED) : -1 !=
        c.indexOf("System server started") ? this.setBootStep_(_BOOT_STEP_SYSTEM_SERVER_STARTED) : -1 == c.indexOf("Activity onResume") || this.hasSeenOnResume_ || (a = ["shorttime", "ArcRuntime.App.OnResumeTime", getUptime()], this.scheduleUmaOnBackgroundPage_(a), this.clearSplash_(), this.setBootStep_(_BOOT_STEP_DONE), this.hasSeenOnResume_ = !0)
    } else if ("crashExtraInformation" == a.command)for (c in a.data)a.data.hasOwnProperty(c) && (this.crashExtraInformation_[c] = void 0 === this.crashExtraInformation_[c] ? "" : this.crashExtraInformation_[c] +
      "\n", this.crashExtraInformation_[c] += a.data[c]); else"reportCrash" == a.command ? this.reportCrash_("Android unhandled exception", null) : (console.log("Unknown plugin message:"), console.log(a)); else this.handleAppPluginMessage_(a)
  }.bind(this), !1);
  a.addEventListener("crash", function (a) {
    this.showCrash_("plugin crashed");
    this.crashReportReceived_ || this.reportCrash_("plugin crash without minidump", null)
  }.bind(this), !1);
  this.isLoadingApk_ ? this.onLoadingApkCompleted_ = function () {
    this.handleAppPluginLoadAttempt_(a)
  }.bind(this) :
    this.handleAppPluginLoadAttempt_(a)
};
Plugin.prototype.heartbeat_ = function () {
  null != this.appPlugin_ && (this.waitingForHeartbeat_ ? (console.error("PING TIMEOUT: The plugin has not responded to the previous ping request yet, assume it crashed."), this.showCrash_("heartbeat ping timeout"), this.reportCrash_("heartbeat ping timeout", null)) : (this.waitingForHeartbeat_ = !0, this.postMessage({namespace: "androidHeartbeat", command: "ping", data: {}})))
};
Plugin.prototype.removePlugin_ = function () {
  null != this.appPlugin_ && (null != this.heartbeatInterval_ && (clearInterval(this.heartbeatInterval_), this.heartbeatInterval_ = null), document.getElementById("appdiv").removeChild(this.appPlugin_), this.appPlugin_ = null, this.appPluginReady_ = !1)
};
Plugin.prototype.closeWindow_ = function () {
  this.reportAppShutdown_(!1);
  this.removePlugin_();
  this.notificationManager_.destroy();
  this.backgroundPage_.crashReporter.shutDown();
  window.close()
};
Plugin.prototype.showCrash_ = function (a) {
  getCwsInstalled().then(function (a) {
    a || (this.removePlugin_(), document.getElementById("appdiv").style.background = "black url(sadplugin.png) center no-repeat", this.clearSplash_())
  }.bind(this));
  console.error(a)
};
Plugin.prototype.showNotSupported_ = function () {
  this.removePlugin_();
  this.initializeWindow_();
  this.clearSplash_();
  var a = document.getElementById("errortext"), b = chrome.i18n.getMessage("appNotSupported");
  b || (b = "This app is incompatible with your device.");
  a.appendChild(document.createTextNode(b));
  document.getElementById("errordiv").style.display = "block"
};
Plugin.prototype.doLayout_ = function (a) {
  var b = this.computeLayout_(a, this.getWindowBounds_(), getCurrentZoom());
  this.applyLayout_(a, b)
};
Plugin.prototype.computeLayout_ = function (a, b, c) {
  if (this.initializing_)throw"doLayout_ should not be called during initialization!";
  var d = {top: 0, left: 0, height: 0, width: 0}, e = !1, f = 90 == this.rotation_ || 270 == this.rotation_, h = f ? this.metadata_.width : this.metadata_.height, k = f ? this.metadata_.height : this.metadata_.width, l = this.previousZoom_ != c;
  this.previousZoom_ = c;
  var g;
  l || a && !this.isWindowMaximized_() ? (g = k, b = h) : (g = b.width / c, b = b.height / c - _TOPBAR_HEIGHT);
  var n = g / b, m = k / h;
  if (l || !this.isWindowMaximized_() && !a && (g <
    k || b < h))e = !0;
  g < k || b < h ? (d.height = this.metadata_.height, d.width = this.metadata_.width) : n > m ? (d.height = b, d.width = Math.floor(b * m), d.left = Math.floor((g - d.width) / 2)) : (d.height = Math.floor(g / m), d.width = g, d.top = Math.floor((b - d.height) / 2));
  f && (d.top += (d.height - d.width) / 2, d.left += (d.width - d.height) / 2, a = d.width, d.width = d.height, d.height = a);
  return{containerSize: {width: g, height: b}, pluginBounds: d, resizeWindow: e, windowSize: {width: k * c, height: (h + _TOPBAR_HEIGHT) * c}, zoomChanged: l}
};
Plugin.prototype.applyLayout_ = function (a, b) {
  var c = document.getElementById("appdiv"), d = this.appPlugin_;
  this.rotation_ != this.cachedRotation_ && d && (d.style.opacity = 0, setTimeout(function () {
    d.style.opacity = 1
  }, 400), d.style.webkitTransform = "rotate(-" + this.rotation_ + "deg)", this.cachedRotation_ = this.rotation_);
  (a || b.zoomChanged) && chrome.app.window.current().innerBounds.setMinimumSize(Math.round(b.windowSize.width), Math.round(b.windowSize.height));
  b.resizeWindow && window.resizeTo(b.windowSize.width, b.windowSize.height);
  c.style.width = b.containerSize.width + "px";
  c.style.height = b.containerSize.height + "px";
  d && (d.setAttribute("width", b.pluginBounds.width), d.setAttribute("height", b.pluginBounds.height), d.style.top = b.pluginBounds.top + "px", d.style.left = b.pluginBounds.left + "px", d.style.position = "absolute")
};
Plugin.prototype.setRotation_ = function (a) {
  if (this.rotation_ != a)if (0 != a && 90 != a && 180 != a && 270 != a)console.log("Rotation (" + a + "deg) is not supported."); else {
    var b = 0 == a || 180 == a ? this.metadata_.width : this.metadata_.height, c = 0 == a || 180 == a ? this.metadata_.height : this.metadata_.width, c = c + _TOPBAR_HEIGHT, d = getCurrentZoom(), c = c * d, b = b * d;
    chrome.app.window.current().innerBounds.setMinimumSize(b, c);
    this.rotation_ = a;
    this.doLayout_(!1)
  }
};
Plugin.prototype.setBackButtonEnabled_ = function (a) {
  this.backButtonEnabled_ = a;
  this.setTopbarImagesAndVisibility_(null)
};
Plugin.prototype.handleClipboardMessage_ = function (a) {
  "pushhost" != a.command && "pullhost" != a.command ? console.log("Received unknown clipboard message: " + JSON.stringify(a)) : chrome.runtime.sendMessage(a, function (a) {
    this.postMessage(a)
  }.bind(this))
};
Plugin.prototype.handleDisplayMessage_ = function (a) {
  "config" == a.command ? this.setRotation_(a.data.rotation) : "setBackButtonUIEnabled" == a.command ? this.metadata_.disableAutoBackButton || this.setBackButtonEnabled_(a.data.enable) : "showNoGpu" == a.command ? (this.showNotSupported_(), console.error("No GPU support.")) : console.log("Received unknown display command: " + a.command)
};
Plugin.prototype.handleBrowserMessage_ = function (a) {
  "openUrl" == a.command ? window.open(a.data.data) : (console.log("Received unknown intent message: "), console.log(a))
};
Plugin.prototype.handleSystemMessage_ = function (a) {
  "reboot" == a.command ? (console.log("Reboot requested"), this.closeWindow_(), chrome.runtime.reload()) : "shutDown" == a.command ? (console.log("Shut down requested"), this.closeWindow_()) : "activityStackEmpty" == a.command ? this.metadata_.allowEmptyActivityStack || (console.log("Activity stack is empty. Shutting down."), this.closeWindow_()) : "enableCrashReporting" == a.command ? (a.data.enabled && console.log("Crash reporting is enabled"), this.backgroundPage_.crashReporter.setCrashReportingEnabled(a.data.enabled)) :
    console.log("Received unknown system message: " + a)
};
Plugin.prototype.relayGcmMessage_ = function (a) {
  var b = this.backgroundPage_.gcm;
  b ? b.handleGcmRequest(a, this) : console.error("Play Services is likely not enabled.")
};
Plugin.prototype.handleMediaStreamMessage_ = function (a) {
  if ("audioOpenCall" == a.command)if (null != this.audioTrack_) {
    console.error("Only one audio track may be opened at a time");
    var b = {namespace: "mediaStream", command: "audioOpenResponse", data: {requester: a.data.requester, requestid: a.data.requestid, result: null}};
    this.postMessage(b)
  } else navigator.webkitGetUserMedia({audio: !0}, function (b) {
    this.audioTrack_ = b.getAudioTracks()[0];
    this.postMessage({namespace: "mediaStream", command: "audioOpenResponse", data: {requester: a.data.requester,
      requestid: a.data.requestid, result: this.audioTrack_}})
  }.bind(this), function (b) {
    console.error("Audio stream failed to open", b);
    this.postMessage({namespace: "mediaStream", command: "audioOpenResponse", data: {requester: a.data.requester, requestid: a.data.requestid, result: null}})
  }.bind(this)); else"audioCloseCall" == a.command ? (null != this.audioTrack_ && (this.audioTrack_.stop(), this.audioTrack_ = null), b = {namespace: "mediaStream", command: "audioCloseResponse", data: {requester: a.data.requester, requestid: a.data.requestid,
    result: !0}}, this.postMessage(b)) : "videoOpenCall" == a.command ? null != this.videoTrack_ ? (console.error("Only one video track may be opened at a time"), b = {namespace: "mediaStream", command: "videoOpenResponse", data: {requester: a.data.requester, requestid: a.data.requestid, result: null}}, this.postMessage(b)) : navigator.webkitGetUserMedia({video: {optional: [
    {minHeight: 640}
  ]}}, function (b) {
    this.videoTrack_ = b.getVideoTracks()[0];
    this.postMessage({namespace: "mediaStream", command: "videoOpenResponse", data: {requester: a.data.requester,
      requestid: a.data.requestid, result: this.videoTrack_}})
  }.bind(this), function (b) {
    console.error("Video stream failed to open", b);
    this.postMessage({namespace: "mediaStream", command: "videoOpenResponse", data: {requester: a.data.requester, requestid: a.data.requestid, result: null}})
  }.bind(this)) : "videoCloseCall" == a.command ? (null != this.videoTrack_ && (this.videoTrack_.stop(), this.videoTrack_ = null), b = {namespace: "mediaStream", command: "videoCloseResponse", data: {requester: a.data.requester, requestid: a.data.requestid, result: !0}},
    this.postMessage(b)) : console.log("Received unknown media stream message: " + a)
};
Plugin.prototype.handleHeartbeatMessage_ = function (a) {
  "pong" == a.command ? this.waitingForHeartbeat_ = !1 : console.log("Received unknown heartbeat message: " + a)
};
Plugin.prototype.handleChildPluginMessage_ = function (a) {
  ChildPlugin.handleChildPluginMessage(a, this.postMessage.bind(this), this.postMessage.bind(this), this.postMessage.bind(this))
};
Plugin.prototype.setTopbarImagesAndVisibility_ = function (a) {
  this.topbar_ || this.initializeTopBar_(document.getElementById("topbar"));
  var b = ["back", "minimize", "maximize", "close"], c = this.isFocusedWindow_;
  null != a && (this.isFocusedWindow_ = a);
  for (a = 0; a < b.length; ++a) {
    var d = document.getElementById(b[a] + "-button");
    c != this.isFocusedWindow_ && (d.src = (this.isFocusedWindow_ ? "" : "in") + "active_window_" + b[a] + ".png");
    d.className = this.isFocusedWindow_ ? "button" : "inactbutton";
    "back" == b[a] ? d.className = this.backButtonEnabled_ ?
      "button" : "hiddenbutton" : "maximize" == b[a] && "disabled" == this.metadata_.resize ? d.className = "hiddenbutton" : "extdir-button" != b[a] && (d.className = "button")
  }
  this.topbar_.className = this.isFocusedWindow_ ? "" : "inact"
};
Plugin.prototype.handleMouseDown_ = function (a) {
  0 == a.button && (this.pressedButton_ = a.currentTarget, a.cancelBubble = !0)
};
Plugin.prototype.handleMouseUp_ = function (a) {
  if (0 == a.button) {
    var b = this.pressedButton_;
    this.pressedButton_ = null;
    b == a.currentTarget && ("minimize-button" == b.id && this.minimizeWindow_(), "maximize-button" == b.id ? "disabled" != this.metadata_.resize && (this.isWindowMaximized_() ? this.restoreWindow_() : this.maximizeWindow_()) : "close-button" == b.id ? this.closeWindow_() : "back-button" == b.id ? this.backButtonEnabled_ && this.postMessage({namespace: "pluginInputManager", command: "simulateButton", data: {button: "backButton"}}) :
      "extdir-button" == b.id && this.fileSystemManager_.openAndMountExternalDirectory(!0));
    (a = document.getElementById("app-plugin")) && a.focus()
  }
};
Plugin.prototype.initializeTopBar_ = function (a) {
  if (this.initializing_)throw"initializeTopBar_ should not be called during initialization!";
  this.topbar_ = a;
  a.addEventListener("mousedown", this.handleMouseDown_.bind(this));
  a = ["back-button", "extdir-button", "minimize-button", "maximize-button", "close-button"];
  for (var b = 0; b < a.length; ++b) {
    var c = document.getElementById(a[b]);
    c.addEventListener("mousedown", this.handleMouseDown_.bind(this));
    c.addEventListener("mouseup", this.handleMouseUp_.bind(this))
  }
  window.addEventListener("mouseup",
    this.handleMouseUp_.bind(this));
  window.onblur = function () {
    this.pressedButton_ != this.topbar_ && (this.setTopbarImagesAndVisibility_(!1), this.pressedButton_ = null)
  }.bind(this);
  window.onfocus = function () {
    this.pressedButton_ = null;
    this.setTopbarImagesAndVisibility_(!0)
  }.bind(this)
};
Plugin.prototype.getWindowBounds_ = function () {
  return chrome.app.window ? chrome.app.window.current().innerBounds : {width: 0, height: 0}
};
Plugin.prototype.isWindowMaximized_ = function () {
  return chrome.app.window && chrome.app.window.current().isMaximized()
};
Plugin.prototype.maximizeWindow_ = function () {
  chrome.app.window && chrome.app.window.current().maximize()
};
Plugin.prototype.restoreWindow_ = function () {
  chrome.app.window && chrome.app.window.current().restore()
};
Plugin.prototype.showWindow = function () {
  chrome.app.window && chrome.app.window.current().show()
};
Plugin.prototype.onRelaunched = function (a) {
  window.arc.launchArgs = a;
  a.items && this.shell("am start -n org.chromium.arc/.FileHandlerLaunchHelperActivity;");
  chrome.app.window.current().focus()
};
Plugin.prototype.getMetadata = function () {
  return this.metadata_
};
Plugin.prototype.minimizeWindow_ = function () {
  chrome.app.window.current().minimize();
  var a = document.getElementById("minimize-button");
  a.style.backgroundColor = "#FFF";
  setTimeout(function () {
    a.addEventListener("mouseenter", function () {
      a.style.backgroundColor = "";
      a.removeEventListener("mouseenter", arguments.callee, !1)
    }, !1)
  }, 0)
};
console.assert(window.arc);
console.assert(window.arc.launchArgs);
var plugin = null;
if (!window.arc.launchArgs.suppressPluginInit) {
  var times = {app_launch_time: window.arc.appLaunchTime}, plugin = new Plugin(times);
  plugin.init()
}
;
//# sourceMappingURL=gen_index.min.js.map
